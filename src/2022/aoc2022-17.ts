export {};

const getShapeMinYByX = (shape: string[]): number[] => {
  return Array.from(shape[0]).map((_, x) => {
    for (let y = 0; y < shape.length; y++) {
      if (shape[y][x] === '#') return y;
    }
    return shape.length - 1;
  });
};

const getShapeMaxYByX = (shape: string[]): number[] => {
  return Array.from(shape[0]).map((_, x) => {
    for (let y = shape.length - 1; y > 0; y--) {
      if (shape[y][x] === '#') return y;
    }
    return 0;
  });
};

const getShapeMinXByY = (shape: string[]): number[] => {
  return shape.map((line) => {
    const x = line.indexOf('#');
    return x >= 0 ? x : 0;
  });
};

const getShapeMaxXByY = (shape: string[]): number[] => {
  return shape.map((line) => {
    const x = line.lastIndexOf('#');
    return x >= 0 ? x : line.length - 1;
  });
};

function* infiniteGet<T>(input: T[]): Generator<T> {
  let n = 0;
  while (true) {
    yield input[n];
    n = (n + 1) % input.length;
  }
}

const part1 = (input: string, shapes: string[][]) => {
  const WIDTH = 7;
  const NB_ROCKS = 10000;
  const map: string[][] = Array(NB_ROCKS * 4)
    .fill(0)
    .map(() => Array(WIDTH).fill('.'));
  const shapeDescriptors = shapes.map((x) => [
    x,
    getShapeMinXByY(x),
    getShapeMaxXByY(x),
    getShapeMinYByX(x),
    getShapeMaxYByX(x),
  ]);
  const getShape = infiniteGet(shapeDescriptors);
  const maxY = map.length - 1;
  let highest = maxY;
  const highestByX = Array(WIDTH).fill(highest);
  const getChar = infiniteGet(Array.from(input));
  // const heightDiff = [];
  const heightHistory = [0];
  for (let nRock = 0; nRock < NB_ROCKS; nRock++) {
    const [shape, shapeMinX, shapeMaxX, shapeMinY, shapeMaxY] = getShape.next().value;

    const canFall = (x: number, y: number): boolean => {
      return shapeMaxY.every((dy: number, dx: number) => map[y + dy + 1]?.[x + dx] === '.');
    };

    const canMoveLeft = (x: number, y: number): boolean => {
      return shapeMinX.every((dx: number, dy: number) => map[y + dy]?.[x + dx - 1] === '.');
    };

    const canMoveRight = (x: number, y: number): boolean => {
      return shapeMaxX.every((dx: number, dy: number) => map[y + dy]?.[x + dx + 1] === '.');
    };

    let shapeX = 2,
      shapeY = highest - 2 - shape.length;
    while (true) {
      const nextMove = getChar.next().value;
      if (nextMove === '<' && canMoveLeft(shapeX, shapeY)) shapeX--;
      else if (nextMove === '>' && canMoveRight(shapeX, shapeY)) shapeX++;
      if (!canFall(shapeX, shapeY)) break;
      shapeY++;
    }
    // update map
    for (let y = 0; y < shape.length; y++) {
      for (let x = 0; x < shape[0].length; x++) {
        if (shape[y][x] === '#') map[shapeY + y][shapeX + x] = '#';
      }
    }
    // update highest and highestByX
    for (let x = 0; x < shape[0].length; x++) {
      const maxPossibleY = shapeMinY[x] + shapeY - 1;
      highestByX[shapeX + x] = maxPossibleY;
      highest = Math.min(highest, maxPossibleY);
    }
    // console.log('Turn', nRock + 1, 'height', maxY - highest);
    heightHistory.push(maxY - highest);
    // heightDiff.push(heightHistory[heightHistory.length - 1] - heightHistory[heightHistory.length - 2]);
  }
  // console.log(heightDiff.join(''));
  return maxY - highest;
};

const part1LimitHeight = (input: string, shapes: string[][]) => {
  const WIDTH = 7;
  const NB_ROCKS = 1_000_000_000_000;
  const maxY = NB_ROCKS * 4;
  let highest = maxY;
  const highestByX = Array(WIDTH).fill(highest);
  const map: Record<number, string[]> = {};
  for (let i = 0; i < 8; i++) {
    map[highest - i] = Array(WIDTH).fill('.');
  }

  const shapeDescriptors = shapes.map((x) => [
    x,
    getShapeMinXByY(x),
    getShapeMaxXByY(x),
    getShapeMinYByX(x),
    getShapeMaxYByX(x),
  ]);
  const getShape = infiniteGet(shapeDescriptors);
  const getChar = infiniteGet(Array.from(input));
  for (let nRock = 0; nRock < NB_ROCKS; nRock++) {
    const [shape, shapeMinX, shapeMaxX, shapeMinY, shapeMaxY] = getShape.next().value;

    const canFall = (x: number, y: number): boolean => {
      return shapeMaxY.every((dy: number, dx: number) => map[y + dy + 1]?.[x + dx] === '.');
    };

    const canMoveLeft = (x: number, y: number): boolean => {
      return shapeMinX.every((dx: number, dy: number) => map[y + dy]?.[x + dx - 1] === '.');
    };

    const canMoveRight = (x: number, y: number): boolean => {
      return shapeMaxX.every((dx: number, dy: number) => map[y + dy]?.[x + dx + 1] === '.');
    };

    let shapeX = 2,
      shapeY = highest - 2 - shape.length;
    while (true) {
      const nextMove = getChar.next().value;
      if (nextMove === '<' && canMoveLeft(shapeX, shapeY)) shapeX--;
      else if (nextMove === '>' && canMoveRight(shapeX, shapeY)) shapeX++;
      if (!canFall(shapeX, shapeY)) break;
      shapeY++;
    }
    // update map
    for (let y = 0; y < shape.length; y++) {
      for (let x = 0; x < shape[0].length; x++) {
        if (shape[y][x] === '#') map[shapeY + y][shapeX + x] = '#';
      }
    }
    // update highest and highestByX
    for (let x = 0; x < shape[0].length; x++) {
      const maxPossibleY = shapeMinY[x] + shapeY - 1;
      highestByX[shapeX + x] = maxPossibleY;
      highest = Math.min(highest, maxPossibleY);
    }
    // update map bounds
    for (let y = 0; y < shape.length; y++) {
      const yThreshold = shapeY + y;
      const line = map[yThreshold];
      if (line?.every((x) => x === '#')) {
        // prune this line and all below
        for (const key of Object.keys(map)) {
          const mapY = +key;
          if (mapY >= yThreshold) {
            delete map[mapY];
          }
        }
      }
    }
    for (let i = 0; i < 8; i++) {
      const y = highest - i;
      if (!map[y]) map[y] = Array(WIDTH).fill('.');
    }
    if ((nRock + 1) % 100000 === 0)
      console.log('Turn', nRock + 1, 'height', maxY - highest, 'map height', Object.keys(map).length);
  }
  return maxY - highest;
};

const part2 = (seed: number[], cycle: number[], nbRocks: number) => {
  const bounds = Math.min(seed.length, nbRocks);
  const seedSum = seed.slice(0, bounds).reduce((a, b) => a + b);
  if (nbRocks <= seed.length) {
    return seedSum;
  }
  const singleCycleSum = cycle.reduce((a, b) => a + b);
  const remainingAfterSeed = nbRocks - seed.length;
  const nbCycle = Math.floor(remainingAfterSeed / cycle.length);
  const remainingInLastCycle = remainingAfterSeed % cycle.length;
  const cycleLastSum = cycle.slice(0, remainingInLastCycle).reduce((a, b) => a + b, 0);
  return seedSum + cycleLastSum + singleCycleSum * nbCycle;
};

const shapes = `
####

.#.
###
.#.

..#
..#
###

#
#
#
#

##
##
`
  .split('\n\n')
  .map((x) => x.split('\n').filter(Boolean));

const inputSample = `>>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>`;

const inputReal = ``;

console.log(part1(inputSample, shapes));
console.log(part1(inputReal, shapes));
// console.log(part1LimitHeight(inputSample, shapes));
// console.log(part1LimitHeight(inputReal, shapes));

const sampleSeed = '132121322013202';
const sampleCycle = '13340123011322002340121201212013200';

const realSeed =
  '133021232213302123001332012140022020322212342123011332213212130021022013200133401320002240122201330013342133001322200320133001230012320133200230213020133021334013340133021330013032133001330203320122421234013320123001332013322133421330212242003221322012122112220300111242121201332013320133221330011222003400330003340103021330013320130021322012342121221330213300022201230113200123401320013302130301232013220130401330013322132111321112301';
const realCycle =


const toInt = (s: string) => Array.from(s).map((x) => +x);

console.log(part2(toInt(sampleSeed), toInt(sampleCycle), 1000000000000));
console.log(part2(toInt(realSeed), toInt(realCycle), 1000000000000));
