export {};

const parse = (input: string[]): string[][] => {
  return input.filter(Boolean).map(x=>Array.from(x));
}

const display=(map: string[][], turn: number)=>{
  console.log(`Turn ${turn}:`);
  map.forEach(r => console.log(r.join('')))
}

const hasNeighbour = (map: string[][], x: number, y: number): boolean => {
  for (let dx = -1; dx <= 1; dx++) if (map[y-1]?.[x+dx] === '#' || map[y+1]?.[x+dx] === '#') return true;
  return map[y]?.[x - 1] === '#' || map[y]?.[x + 1] === '#';
}

type KEY = `${number},${number}`;
type POS = [number, number];

const toKey = (x: number, y:number): KEY => `${x},${y}`;
const toPos = (key: KEY): POS => key.split(',').map(x => +x) as POS;

const getWishedPosition = (map: string[][], x: number, y: number, turn: number): POS | null => {
  if (hasNeighbour(map, x, y)) {
    // noinspection FallThroughInSwitchStatementJS
    switch (turn % 4) {
      case 0:
        if (map[y - 1]?.[x - 1] === '.' && map[y - 1]?.[x] === '.' && map[y - 1]?.[x + 1] === '.') return [x, y - 1];
      case 1:
        if (map[y + 1]?.[x - 1] === '.' && map[y + 1]?.[x] === '.' && map[y + 1]?.[x + 1] === '.') return [x, y + 1];
      case 2:
        if (map[y - 1]?.[x - 1] === '.' && map[y]?.[x - 1] === '.' && map[y + 1]?.[x - 1] === '.') return [x - 1, y];
      case 3:
        if (map[y - 1]?.[x + 1] === '.' && map[y]?.[x + 1] === '.' && map[y + 1]?.[x + 1] === '.') return [x + 1, y];
        if (map[y - 1]?.[x - 1] === '.' && map[y - 1]?.[x] === '.' && map[y - 1]?.[x + 1] === '.') return [x, y - 1];
        if (map[y + 1]?.[x - 1] === '.' && map[y + 1]?.[x] === '.' && map[y + 1]?.[x + 1] === '.') return [x, y + 1];
        if (map[y - 1]?.[x - 1] === '.' && map[y]?.[x - 1] === '.' && map[y + 1]?.[x - 1] === '.') return [x - 1, y];
    }
  }
  return null;
}

function getBounds(map: string[][]) {
  let [minX, minY, maxX, maxY] = [Infinity, Infinity, -Infinity, -Infinity];
  for (let y = 0; y < map.length; y++) {
    const row = map[y];
    for (let x = 0; x < map[0].length; x++) {
      if (row[x] !== '#') continue;
      minX = Math.min(minX, x);
      minY = Math.min(minY, y);
      maxX = Math.max(maxX, x);
      maxY = Math.max(maxY, y);
    }
  }
  return [minX, minY, maxX, maxY];
}

function getCount(map: string[][]) {
  let count = 0;
  for (let y = 0; y < map.length; y++) {
    const row = map[y];
    for (let x = 0; x < map[0].length; x++) count += Number(row[x] !== '#');
  }
  return count;
}

const eventuallyExtend = (map: string[][]): string[][] => {
  const [minX, minY, maxX, maxY] = getBounds(map);
  if (minX === 0 || minY === 0 || maxX === map[0].length-1 || maxY === map.length - 1) {
    const newMap = Array(map.length + 2);
    newMap[0] = Array(map[0].length + 2).fill('.');
    newMap[map.length + 1] = Array(map[0].length + 2).fill('.');
    for (let y = 0; y < map.length; y++) newMap[y + 1] = ['.', ...map[y], '.'];
    return newMap;
  }
  return map;
}

function runTurn(map: string[][], i: number) {
  const fixedPosition: POS[] = [];
  const wishedNewPosition: Record<KEY, Array<POS>> = {};
  const nextMap = map.map(x => x.map(() => '.'));
  for (let y = 0; y < map.length; y++) {
    const row = map[y];
    for (let x = 0; x < map[0].length; x++) {
      if (row[x] !== '#') continue;
      const wishedPosition = getWishedPosition(map, x, y, i);
      if (!wishedPosition) {
        fixedPosition.push([x, y]);
      } else {
        const targetKey = toKey(...wishedPosition);
        let entry = wishedNewPosition[targetKey];
        if (!entry) {
          entry = [];
          wishedNewPosition[targetKey] = entry;
        }
        entry.push([x, y]);
      }
    }
  }
  for (const [x, y] of fixedPosition) nextMap[y][x] = '#';
  for (const [key, positions] of Object.entries(wishedNewPosition)) {
    if (positions.length > 1) for (const [x, y] of positions) nextMap[y][x] = '#';   // conflict => no move
    else {
      const [x, y] = toPos(key as KEY);
      nextMap[y][x] = '#';
    }
  }
  return nextMap;
}

const part1 = (input: string[]) => {
  let map = parse(input);
  for (let turn = 0; turn < 10; turn++) {
    map = eventuallyExtend(map);
    map = runTurn(map, turn);
    if (map.length < 20) display(map, turn+1);
  }
  let [minX, minY, maxX, maxY] = getBounds(map);
  return (maxX - minX + 1) * (maxY - minY + 1) - getCount(map);
};

const part2 = (input: string[]) => {
  let map = parse(input);
  let turn = 0;
  while (true) {
    map = eventuallyExtend(map);
    const newMap = runTurn(map, turn);
    turn++;
    if (map.length < 20) display(map, turn);
    if (map.length === newMap.length && map.every((row, y) => {
      const otherRow = newMap[y];
      return row.every((c, x) => c === otherRow[x]);
    })) break;
    map = newMap;
  }
  return turn;
};

const inputSample = `
..............
..............
.......#......
.....###.#....
...#...#.#....
....#...##....
...#.###......
...##.#.##....
....#..#......
..............
..............
..............
`.split('\n');

const inputReal = `
#..##.....###..##..##...#.#..#..#.#.#.#..#...###..#.....#.##..##.#.##.#.##
..###.##.....#...####.........####..##....########.#.#..########.......#..
##.....##..##.#..#.#....#.##..###.#..#.#.....##..#.###...##..#..##....#...
.####..#...#.....#....###....###.###.##..##..#.##..#.#..##..###....##..###
#.##.#.#.#.###..###.#..##...##.##...#.###.#.#.#.....#.##.#.#.#...#...#.###
##...#......###...#.#.#.##.#.##..#..##..#.....##.#####..######.##..#.#...#
.#....##.....##.#.....#...###..#.#.#..#.......###.....##....##.#..#.##....
....#.#.####..#.#...#.##.####....##..#.#..#.#..##.###.####....#.##..###.##
...#.####..###..#..##.##..#.#..##.##...#....####.####...#..###.#####.#.#.#
#....####.#.#..######...#.#.##.#...######.#..#.#..##...#.......##...#...#.
......##..##...#..#....###...#..##.#.#.#...###.#..####.###...####...#..#..
...#.###.#.#.#.###...##.......#.###...#....#.....#.....##.##.##.#..###.#.#
##.##.###.###..#.#..##.#.####.#.#.#.##...#.###......##...#.#.###..##...#.#
.###.###...#...##.#.#.#.#..#....#####..##.#.###..#.#...##.##..#...#..##.#.
..###...####.##.#.#...###..##...#.####.#####..#..#..#.#####.#..#.#...#....
..###..##.##....##....#.##..#####.#..##..####...#.#..#..##..#..###.##..#..
.....##.#....##.##..#.#...##.#.##..#....#.#.#..###.###.###..#..##.#..#.###
.#..##..#...#..#..#.##.##..####.#..#..####...##.#...##.###...#.#.##.#..###
.#######.#.#.##.#...##.#...#####..###...##..#######.###.#######..##..#####
#..##.###.##..#.##.#.#.#.....#.###.##...#.##.##.....#..###.#..#.#..##.####
......#...#.###.###.#.##.##.####.####.......#.#.#......##...##.#####.###..
#.#.#.#.######...###.#####....#.######.#...#.#.##.#.###.#..##.##.....####.
...#.########.##.#....#.##...#...#...#.#.##.##..##...###.#.#######..#...#.
..###.###.#.####.###..##...####..#.###.####.##....#.##.#...##..#........#.
#...#..###..#.#..#..##....#..###.###..#.######.##.#####..#.#.#.##.###..#.#
#.##.#.##.#..#..#######.###.....#...#..##.#......#.##.....#..##.##...#.##.
.#.#.####.##.###..#####...##.#..###.##.#.###..####...#####.#..##.##..##.##
.#....##..#...#..###...#.##.###.#.#.....#...#.###..##...#.#...#...#..#..#.
##.#..######.#####....#..#.#.###...#..#.##..#.#.###.#...##..######..#....#
..##.##.#...#......#####...#..##.#..#...#..###.#.###..######.#.....#.#....
#.###.###..#.#.#.##.###..#####...###.###.#.#.#..##..#..##..#.#...######.#.
####...#....##..####.#.##..##....#.#.###...##..###.#.#..#..##..#.#...####.
#...##.##..#..##.##.#..####.#.#####.#....#.###..#...##.##...##....####.#..
#.##.###.#..#....#.#.###.##..##..##.###.####.###.#..#..#...#.#.##.##.#....
....##..#...#.######....#..#.####...#.....##..#...#.##.....#..#.#...##.##.
...##..#...#.#.####.##.#.##...#.###..##.#.....#####...####.##.#.#..#.###.#
##..###..#....###.#..##...######..##.####..#..####.###.###.#.###.#.#######
..##.#..##.#####..####......#...##.#.#...#....#.##...#.######.###.##.##...
#..####.##....##.##...#######.#...#.#..####..###....#......##..#.#######..
......#....#..#.##.#...####.#.##.##.##..###.#..####..##..#...##.####..#.##
.#####.#....##..#...##..###.#.#.####.##.#####..#..#.###.####.#####.######.
...#.....#.#.###.#.#.##....###..#.#.####..##.#.#.##.##.#.###.#...###..#...
#......#...####.#....#..#..##.#.#..##.##..#..#..###.##..#...#######..#.##.
#.#.#.####.#..#.....##.##.###.#.#...#.#.#.##.#....##..##....##.#..##.#.##.
.....#.#..#.#.##.##.#.#.#####.###.##.#..######.#..#.#.#..#####.##...###...
#...#..#..#....#...#####.#.##..#.#.##.#.###.##..#####.##...##.#.##.####..#
.#.#..#.#...######.#.#..#..#...#####....#..#.#.######.######.#..#.....####
##.###....##..####.....#####...###.##..##.#...#.#.#..##.##..#.#.##.#.#.#..
###.......###......####.#.##.....######.#.#..##.###.#..#.#..##.##.##..#...
..#...#...###.###...#.#...###.####.##.##.#.##.#...##.##.#......##.#.####.#
##.#.....#.#.#....#....#.####.#...##.#.#.#..#..###...#####......#...#.#.#.
..#.##....#..#.....#....#....#.#.##.......####.#..#.#.##.#.###....##....##
#.#..#..#...#####.##.......#.#.##.....##.#.#.###.......#####.#..#.#...#..#
..#####.#...##.#.#.#.##......#.#.######....#.####.##...##.###..#.###.#.#..
.##..##...#..#.#.#...#.#...#.#####.......#..##..##.##..........#..#..##...
.#.#..#####...##.##.##....##..#...###.#####...##..#.....#.#####.#....##..#
##.####..#.#...#.#.####.####...#####..#.#.##....#...##.#....##.##.##...##.
#..#..#.....#...........#..#...##.####.#..#..##.#.....#...#..#.##.########
#.....#..#.#.##.##.#.###..##..#.#.#..#.##.#.#####....####.#..#.###.#..#.#.
##...#...##.######.#.#####.......##.#.##..###..####..##..#...##.#####.#.##
....#...#..#...####.###.##.#...##...#...####.####..##...##..#.#...##.##.#.
#######.###.######..##..##...##...#..#...##.#.#.##..#...#.##.#.#.#.##..#.#
...#..#.##.##....###.....#.##.##.####.#######..########.##..##.##.#######.
#.#.##.#...#####.##.#...##.#..#.##...#.###.#...##.###...#.##..#...#...###.
##.#..#....###.#...#.###...#.##.###.##.####....##...#.##..##......##....#.
.###...####.##...##.#...#....#####.##...#.#..##..##.##..#..#..##...#..#...
#.##...#.##....##.##...#..#.##..###..##....####.#..#.###.#......##...#..##
#...#..#...###......##..#.....###.#.#.##..#.#.###...####.#.##..##..#..##.#
..###...#..#..#..####....##.#..##..#....###...###...###.###.#.#.####.####.
###......#.......#...#.#.#.....##.##..#...##...#.#...#.#.##.#.#...###.....
#.##.##....###.###.###.#..#.####.#.###.#.#.#.#..###..####.##.#.####..#####
#.#..#..#.###..#.#...#....#..#.#.#...##.##....#.#.....#.####..#..##..##.##
#...#####..#..#.###.##.##.####.##..###....#.###.###.#.#....#.....####.#..#
###..##.##.###.#.###..#..###.####..#.#...##.#..###.#...##...#..##.......##
`.split('\n');

console.log(part1(inputSample));
console.log(part1(inputReal));
console.log(part2(inputSample));
console.log(part2(inputReal));
