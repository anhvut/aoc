import {consoleTimeit, POINT, pointAdd, pointDiff, serializePoint} from '../util';
import {groupBy} from 'es-toolkit';

const part1 = (input: string[]) => {
  const width = input[0].length;
  const height = input.length;
  const grid = input.join('').split('').map((c, i) => [i % width, Math.floor(i / width), c]);
  const gridAntennas = grid.filter(([_x, _y, c]) => c !== '.');
  const antennasByFreq = groupBy(gridAntennas, (x) => x[2]);
  const antinodes = {};
  for (const [_, antennas] of Object.entries(antennasByFreq)) {
    for (let i = 0; i < antennas.length; i++) {
      const p1 = antennas[i] as POINT;
      for (let j = i + 1; j < antennas.length; j++) {
        const p2 = antennas[j] as POINT;
        const d = pointDiff(p2, p1);
        const [x1, y1] = pointAdd(p2, d);
        if (x1 >= 0 && x1 < width && y1 >= 0 && y1 < height) antinodes[serializePoint([x1, y1])] = true;
        const [x2, y2] = pointDiff(p1, d);
        if (x2 >= 0 && x2 < width && y2 >= 0 && y2 < height) antinodes[serializePoint([x2, y2])] = true;
      }
    }
  }
  return Object.keys(antinodes).length;
};

const part2 = (input: string[]) => {
  const width = input[0].length;
  const height = input.length;
  const grid = input.join('').split('').map((c, i) => [i % width, Math.floor(i / width), c]);
  const gridAntennas = grid.filter(([_x, _y, c]) => c !== '.');
  const antennasByFreq = groupBy(gridAntennas, (x) => x[2]);
  const antinodes = {};
  for (const [_, antennas] of Object.entries(antennasByFreq)) {
    for (let i = 0; i < antennas.length; i++) {
      const p1 = antennas[i] as POINT;
      antinodes[serializePoint(p1)] = true;
      for (let j = i + 1; j < antennas.length; j++) {
        const p2 = antennas[j] as POINT;
        const d = pointDiff(p2, p1);
        let [x1, y1] = pointAdd(p2, d);
        while (true) {
          if (x1 < 0 || x1 >= width || y1 < 0 || y1 >= height) break;
          antinodes[serializePoint([x1, y1])] = true;
          [x1, y1] = pointAdd([x1, y1], d);
        }
        let [x2, y2] = pointDiff(p1, d);
        while (true) {
          if (x2 < 0 || x2 >= width || y2 < 0 || y2 >= height) break;
          antinodes[serializePoint([x2, y2])] = true;
          [x2, y2] = pointDiff([x2, y2], d);
        }
      }
    }
  }
  return Object.keys(antinodes).length;
};

// noinspection SpellCheckingInspection
const inputSample = `
............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............
`
  .trim()
  .split('\n');

// noinspection SpellCheckingInspection
const inputReal = `
...............................6.B..........P.....
n..............M..................................
....n.....sM7.............................6.....p.
......................Mr......................P...
.......n.......................................p.E
.......................6...................p......
r..............................C........B....P....
.....................d........6......B4....P......
.........................7....................4...
.n......................R..............4..........
.....N........S.................K.C..........4....
...........N..r.....................B....K........
..................................................
......N.......x.............7.......K.....2....E..
...................r..H........R..................
.....................s....p........C...........2..
....3.......................M.....................
........k....................H....5...............
.....x....N................d.5..y................J
m.....................d7...................J......
.......exk........................................
.......x.............5.......R....................
..........eY......................................
...S.3..............................O.E...J.......
.......8...H....k...............J.................
......S.e.........C.H.....................X.....y.
................j..........y.........2............
...........e.........k............................
......YS...3..............5..........K...XR.......
...m..............j.s..........c..................
.........................j........................
...............j..................................
.....m................................2...........
.........Y......................................b.
..................................................
.......................h...........b..............
............m......D..............d...............
........o......D..................................
...................................O..............
..................................................
......8...........................................
........D.Y..o...................1................
.....................................b..9.........
........................h..0......................
.....o......................h..0........b1........
.........8.............X..........................
..........o..........c..........1...........O.....
....8....................y0...c...................
..............D.......c..................9..0.....
............................1..........O..9.......
`
  .trim()
  .split('\n');

const runs = [1, 1, 1, 1];
if (runs[0]) consoleTimeit('part1 sample', () => part1(inputSample));
if (runs[1]) consoleTimeit('part1 real', () => part1(inputReal));
if (runs[2]) consoleTimeit('part2 sample', () => part2(inputSample));
if (runs[3]) consoleTimeit('part2 real', () => part2(inputReal));
